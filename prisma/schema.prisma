// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
  bundles       Bundle[]
  analytics     Analytics[]
  onboarding    Boolean   @default(false)
  byobs         BYOB[]
}

model Bundle {
  id              Int      @id @default(autoincrement())
  bundleName      String
  bundleType      String
  ProductBundleId String?  @unique
  ProductHandle   String?  @unique
  description     String?
  discountType    String?
  discountValue   String?
  products        Json     // Changed from String to Json
  userId          String
  user            Session  @relation(fields: [userId], references: [id])
  variants        Json?    // Changed from String? to Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          String?
}

model Analytics{
  id                 Int      @id @default(autoincrement())
  revenue            String
  orders             String
  currency           String?
  userId             String
  user               Session  @relation(fields: [userId], references: [id])
}

model ShopInstallation {
  id          String   @id @default(cuid())
  shop        String   @unique
  myshopifyDomain String? @unique
  installedAt DateTime @default(now())
  shopifyStore ShopifyStore?
  subscription      AppSubscription[]
  bundleRevenues    BundleRevenue[]
}

model ShopifyStore {
  id                String   @id @default(cuid())
  shopInstallation  ShopInstallation @relation(fields: [shop], references: [shop])
  shop              String   @unique
  name              String
  myshopifyDomain   String   @unique
  url               String
  eligibleForBundles Boolean
  storefront        Boolean
  currencyCode      String
  planDisplayName   String
  partnerDevelopment Boolean
  shopifyPlus       Boolean
  createdAt         DateTime
  updatedAt         DateTime @updatedAt
  contactEmail      String
  email             String
  description       String?
  ianaTimezone      String
  primaryDomainId   String
  country           String?
  mailingSubscribed Boolean @default(true)
  limitReached      Boolean  @default(false)
  subscription      AppSubscription[]
  
}

model ScheduledUninstall {
  id           String   @id @default(cuid())
  shop         String   @unique
  scheduledFor DateTime
  sessionId    String
  createdAt    DateTime @default(now())
}

model BYOB {
  id                    String   @id @default(cuid())
  productId             String   @unique
  bundleName            String
  bundleDescription     String?
  products              Json     // Stored as JSON array
  isDiscountOptional    Boolean  @default(false)
  discountType          String?  
  discountValue         String?
  noDiscount            Boolean  @default(false)
  media                 Json     // Stored as JSON array
  conditions            Json     // Stored as JSON array
  tierBasedOn           String   @default("percentage")
  purchaseRequirement   String   @default("quantity")
  tiers                 Json     // Stored as JSON array
  productStatus         String   @default("draft")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  userId                String
  user                  Session  @relation(fields: [userId], references: [id])
}

model AppSubscription {
  id              String    @id @default(cuid())
  shop            String    @unique
  status          String    @default("FREE")
  plan            String?
  previousPlan    String?
  revenueTracked  Decimal?  @default(0) @db.Decimal(10, 2)
  monthlyRevenue  Decimal?  @default(0) @db.Decimal(10, 2)
  lastResetDate   DateTime? // To track when monthly revenue was last reset
  subscriptionId  String?   // Shopify subscription ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  shopInstallation ShopInstallation @relation(fields: [shop], references: [myshopifyDomain], map: "AppSubscription_shopInstallation_fkey")
  shopifyStore    ShopifyStore @relation(fields: [shop], references: [myshopifyDomain], map: "AppSubscription_shopifyStore_fkey")
}

model BundleRevenue {
  id              String    @id @default(cuid())
  shop            String
  orderId         String
  bundleId        String
  bundleName      String    // Store bundle name for historical reference
  bundleType      String    // 'fixed', 'infinite', or 'byob'
  revenue         Decimal   @db.Decimal(10, 2)
  originalPrice   Decimal   @db.Decimal(10, 2)  // Price before discount
  discountAmount  Decimal   @db.Decimal(10, 2)  // Amount saved
  discountType    String?   // Type of discount applied
  discountValue   String?   // Value of discount applied
  currency        String
  quantity        Int       // Number of bundles purchased
  customerEmail   String?
  customerId      String?   // Shopify customer ID
  orderNumber     Int
  orderStatus     String    // paid, pending, cancelled, etc.
  firstPurchase   Boolean   // Is this customer's first bundle purchase?
  products        Json      // Array of product IDs and quantities in the bundle
  createdAt       DateTime  @default(now())
  shopInstallation ShopInstallation @relation(fields: [shop], references: [shop])

  @@unique([shop, orderId, bundleId])
  @@index([shop, customerEmail])
  @@index([shop, createdAt])
  @@index([bundleId, createdAt])
}
